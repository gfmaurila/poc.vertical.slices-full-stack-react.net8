version: '3.9'

# docker-compose up --build
# export COMPOSE_PROJECT_NAME=Dizz
# docker-compose -p dizz_project up --build
# Update-Database -Context MainContext 

networks:
  app-backend:
    driver: bridge
  app-frontend:
    driver: bridge

services:

# APIS BEGIN -----------------------------------------------------------------------------

  # https://www.bezkoder.com/docker-compose-react-nodejs-mysql/
  poc.admin.react.webapi:
    container_name: web.admin.react.webapi
    restart: always
    build:
      context: ./frontend/web.admin.react
      dockerfile: Dockerfile
    expose:
      - 3000
    ports:
      - '80:3000'
    volumes:
      - .:/app
      - /frontend/web.admin.react/app/node_modules
    networks:
      - app-frontend 
    depends_on:
      - api.admin.webapi
    links:
      - api.admin.webapi

  api.admin.webapi:
    image: ${DOCKER_REGISTRY-}api.admin.webapi
    container_name: api.admin.webapi
    restart: always
    build:
      context: .
      dockerfile: backend/API.Admin/Dockerfile
    expose:
      - 5075
    ports:
      - 5075:5075
    links:
      - sqlserver
      - mongoserver
      - kafka
      - rabbitmq
    networks:
      - app-backend
    depends_on:
      - sqlserver
      - mongoserver
      - kafka
      - rabbitmq 
  

# APIS END -----------------------------------------------------------------------------

# DB BEGIN -----------------------------------------------------------------------------

  # SQL Server
  # Add-Migration Inicial -Context SqlServerDb
  # Update-Database -Context SqlServerDb
  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    cap_add: [ 'SYS_PTRACE' ]
    hostname: mssql
    container_name: sqlserver
    restart: always
    expose:
      - 1433
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=@Poc2Minimal@Api
    networks:
      - app-backend


  # Redis Cache Server
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - app-backend

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-backend

# DB END -----------------------------------------------------------------------------

# WORKER BEGIN -----------------------------------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    networks: 
      - app-backend
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    networks: 
      - app-backend
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # http://localhost:9000    
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"  # Porta que o Kafdrop ficará acessível
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"  # Endereço do broker Kafka, ajuste conforme necessário
      JVM_OPTS: "-Xms32M -Xmx64M"  # Configurações de JVM, ajuste conforme suas necessidades
      SERVER_SERVLET_CONTEXTPATH: "/"  # Contexto raiz do Kafdrop
    depends_on:
      - kafka  # Garante que o Kafka esteja pronto antes de iniciar o Kafdrop
    networks:
      - app-backend   

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    restart: always
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-backend

# WORKER END ----------------------------------------------------------------------------- 