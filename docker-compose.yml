version: '3.9'

# docker-compose down
# docker-compose up -d --build
# docker-compose up --build
# Update-Database -Context MainContext 

networks:
  app-backend:
    driver: bridge
  app-frontend:
    driver: bridge

services:

# APIS BEGIN -----------------------------------------------------------------------------

  # https://www.bezkoder.com/docker-compose-react-nodejs-mysql/
  poc.admin.react.webapi:
    container_name: web.admin.react.webapi
    restart: always
    build:
      context: ./frontend/web.admin.react
      dockerfile: Dockerfile
    expose:
      - 3000
    ports:
      - '80:3000'
    volumes:
      - .:/app
      - /frontend/web.admin.react/app/node_modules
    networks:
      - app-frontend 
    depends_on:
      - api.admin.webapi
    links:
      - api.admin.webapi

  api.gateway.webapi:
    image: ${DOCKER_REGISTRY-}api.gateway.webapi
    container_name: api.gateway.webapi
    restart: always
    build:
      context: .
      dockerfile: backend/API.Gateway/Dockerfile
    expose:
      - 5060
    ports:
      - 5060:5060
    links:
      - api.admin.webapi
    networks:
      - app-frontend 
      - app-backend
    depends_on:
      - api.admin.webapi

  api.admin.webapi:
    image: ${DOCKER_REGISTRY-}api.admin.webapi
    container_name: api.admin.webapi
    restart: always
    build:
      context: .
      dockerfile: backend/API.Admin/Dockerfile
    expose:
      - 5061
    ports:
      - 5061:5061
    links:
      - sqlserver
      - mongoserver
      - rabbitmq
    networks:
      - app-frontend 
      - app-backend
    depends_on:
      - sqlserver
      - mongoserver
      - rabbitmq  

  poc.twilio.api.webapi:
    image: ${DOCKER_REGISTRY-}poc.twilio.api.webapi
    container_name: poc.twilio.api.webapi
    restart: always
    build:
      context: .
      dockerfile: backend/poc.cqrs.api.twilio.net8/src/01-Presentation/Poc.Twilio.API/Dockerfile
    expose:
      - 5079
    ports:
      - 5079:5079
    links:
      - redis
      - mongoserver
    networks:
      - app-backend
    depends_on:
      - redis
      - mongoserver  
  

# APIS END -----------------------------------------------------------------------------

# DB BEGIN -----------------------------------------------------------------------------

  # SQL Server
  # Add-Migration Inicial -Context SqlServerDb
  # Update-Database -Context SqlServerDb
  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    cap_add: [ 'SYS_PTRACE' ]
    hostname: mssql
    container_name: sqlserver
    restart: always
    expose:
      - 1433
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=@Poc2Minimal@Api
    networks:
      - app-backend

  # Redis Cache Server
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - app-backend

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-backend
  
  # -----------------------------------------------------------------------
    # https://hub.docker.com/r/oracleinanutshell/oracle-xe-11g

    # docker run -d -p 49161:1521 -p 8080:8080 oracleinanutshell/oracle-xe-11g

    # Login http://localhost:8080/apex/apex_admin with following credential:
    # username: ADMIN
    # password: admin
    # password: !G18u03i1986

    # DBEaver
    # hostname: localhost
    # port: 49161
    # sid: xe
    # username: system
    # password: oracle

    # .NET Core 
    # Install-Package Oracle.ManagedDataAccess.Core
    # using Oracle.ManagedDataAccess.Client;
    # "DefaultConnection": "User Id=system;Password=oracle;Data Source=//localhost:1521/xe;"

  oracle:
    image: oracleinanutshell/oracle-xe-11g:latest
    container_name: oracle
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
      - ORACLE_USER=system
      - ORACLE_PASSWORD=oracle
      - ORACLE_DATABASE=xe
    restart: always
    networks:
      - app-backend

  oracle-db:
    image: oracleinanutshell/oracle-xe-11g
    container_name: oracle_db
    ports:
      - "49161:1521"
      - "8080:8080"
    environment:
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
    restart: always
    networks:
      - app-backend

# -----------------------------------------------------------------------


# DB END -----------------------------------------------------------------------------

# WORKER BEGIN -----------------------------------------------------------------------------
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    restart: always
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-backend

# WORKER END ----------------------------------------------------------------------------- 